function Cube=sim2cube(SIM,varargin)
%-----------------------------------------------------------------------------
% read2sim function                                                   ImBasic
% Description: Given a structure array of images (generated by read2sim.m),
%              generate a cube of all the images, in which the first
%              dimension is the image index.
% Input  : - Structure arrray containing at least an '.Im' field which
%            contain an image. This structure array can be generated by
%            read2sim.m. All the images need to have identical size.
%          * Arbitrary number of pairs or arguments: ...,keyword,value,...
%            where keyword are one of the followings:
%            'RField' - Name of field in the SIM structure array that
%                       contains the images to read. Default is 'Im'.
%            'ImDim'  - Dimension of image index. This can be either
%                       1 or 3 (first or last). Default is 1.
% Output : - A cube of images in which the first dimension is the image
%            index. If the input images do not have the same size then
%            will return an empty matrix.
% See also: read2sim.m, sim2file.m, read2cat.m, cube2sim.m
% Tested : Matlab R2011b
%     By : Eran O. Ofek                    Aug 2013
%    URL : http://weizmann.ac.il/home/eofek/matlab/
% Example: Struct = read2sim({rand(10,10), rand(10,10)});
%          Cube   = sim2cube(Struct);
% Reliable: 2
%-----------------------------------------------------------------------------

ImageField  = 'Im';

DefV.RField = ImageField;
DefV.ImDim  = 1;
InPar = set_varargin_keyval(DefV,'n','use',varargin{:});

ImageField = InPar.RField;

Nim  = length(SIM);
if (Nim==0),
    error('No images to coadd, Nim=0');
end

SizeIm = size(SIM(1).(ImageField));
switch InPar.ImDim
    case 1
        Cube = zeros(Nim,SizeIm(1),SizeIm(2));
    case 3
        Cube = zeros(SizeIm(1),SizeIm(2),Nim);
    otherwise
        error('Unknown ImDim option');
end

for Iim=1:1:Nim,
    if (sum(SizeIm==size(SIM(Iim).(ImageField)))==2 && ~isempty(Cube)),
        switch InPar.ImDim
            case 1
                Cube(Iim,:,:) = SIM(Iim).(ImageField);
            case 3
                Cube(:,:,Iim) = SIM(Iim).(ImageField);
            otherwise
                error('Unknown ImDim option');
        end
        
    else
         Cube = [];
    end
end
