function [Struct,Output]=sim2file(Struct,varargin)
%-----------------------------------------------------------------------------
% sim2file function                                                   ImBasic
% Description: Given a structure array of images (e.g., that was constructed
%              by read2im.m), write each one of the images to the disk in
%              several possible formats.
% Input  : - Structure array that was generated by read2im.m.
%            The structure should have the following fields:
%            .Im   - containing the image in a matrix form.
%            .Header - An Nx3 cell array of image header.
%                    If not provided then the header will be empty.
%            .ImageFileName - The image file name to write.
%                    If not provided then the images will the following
%                    names: '<BaseName>%05d.fits', where BaseName is
%                    passed as a keyword,value (see below).
%            The structure may have additional fields like 'FlagIm' and
%            'CCDSEC'.
%          * Arbitrary number of pairs of ...,key,val,... arguments.
%            The following keywords are available:
%            'Output'    - A cell array of images names to use as file names
%                          instead of the .ImageFileName field.
%                          Default is empty cell (i.e., keyword ignored).
%                          Default is empty.
%            'OutDir'    - Output directory in which to write the images.
%                          Default is ''.
%            'OutPrefix' - Additional prefix to add to the file name before
%                          writing it to the disk. Default is ''.
%            'Format'    - One of the following formats:
%                          'FITS'  - A single extension FITS image (default).
%                          'mat'   - A matrix stored in a MATLAB mat file.
%                          'smat'  - A structure (per image) stored
%                                    in a MATLAB mat file.
%                          'ssmat' - A single structure array (will all the
%                                    images) in a MATLAB mat file.
%                          'imwrite'- Write the images using imwrite.m
%                                    where the format and parameters
%                                    are passed using the ImwriteOpt
%                                    keyword.
%            'ImwriteOpt'- A cell array of format parameters to pass to
%                          imwrite.m. Default is {'JPG'}.
%            'BaseName'  - Default images base name to write. This will be
%                          used only if the .ImageFileName field is not
%                          exist an Output keyword value is empty.
%                          Default is 'image'.
%            'AddHead'   - A three column cell array of additional
%                          header keywords to add to FITS header.
%            'AddComment'- A string or a cell array of strings to write
%                          as comments keywords to the FITS header.
%            'AddHistory'- A string or a cell array of strings to write
%                          as history keywords to the FITS header.
%            'DataType'  - FITS image data type. See options in fitswrite.m.
%                          Default is 'float32'.
%            'WriteField'- The image field in the structure array that
%                          will be written as a file.
%                          This can be 'Im' or 'FlagIm'. Default is 'Im'.
% Output : - The updated structure array (e.g., with the new header or
%            file names).
%          - Cell array of file names written to hard drive.
% See also: read2sim.m, sim2cube.m, read2cat.m
% Tested : Matlab R2011b
%     By : Eran O. Ofek                    Aug 2013
%    URL : http://weizmann.ac.il/home/eofek/matlab/
% Example: [~,Output]=sim2file(Struct,'Output',{'my1.fits','my2.fits'});
%          sim2file(Struct,'Output',{'my1.fits','my2.fits'},'AddComment','test')
%          [S,Output]=sim2file(OutS,'Output',{'A.fits'},'WriteField','FlagIm');
% Reliable: 2
%-----------------------------------------------------------------------------

ImageField  = 'Im';
HeaderField = 'Header';
FileField   = 'ImageFileName';
FlagField   = 'FlagIm';

DefV.Output         = {};
DefV.OutDir         = ''; %sprintf('.%s',filesep);
DefV.OutPrefix      = '';
DefV.Format         = 'FITS';
DefV.ImwriteOpt     = {'JPG'};
DefV.BaseName       = 'image';
DefV.AddHead        = cell(0,3);
DefV.AddComment     = {};
DefV.AddHistory     = {};
DefV.AddLastWritten = 'y';
DefV.DataType       = 'float32';
DefV.WriteField     = ImageField;

InPar = set_varargin_keyval(DefV,'n','use',varargin{:});

ImageField = InPar.WriteField; % which field to write as an image

% prepare output file names in Output
if (isempty(InPar.Output)),
   Output = {Struct.(FileField)};
else
   Output = InPar.Output;
   if (~iscell(Output)),
       Output = {Output};
   end
end

Nim = length(Struct);

OutDirPrefix = sprintf('%s%s',InPar.OutDir,InPar.OutPrefix);
if (~isfield(Struct,ImageField) && isempty(Output)),
   % .Im field does not exist and Output does not contains image names
   Output = cell(1,Nim);
   for Iim=1:1:Nim,
      Output{Iim} = sprintf('%s%05d.fits',InPar.BaseName,Iim);
   end
end

% rewrite Output file names into Struct
[Struct(1:1:Nim).(FileField)]=deal(Output{:});


switch lower(InPar.Format)
    case 'fits'
        for Iim=1:1:Nim,
            Header = Struct(Iim).(HeaderField);
            Header = cell_fitshead_addkey(Header,InPar.AddHead);
            % comment
            if (~iscell(InPar.AddComment)),
	            InPar.AddComment = {InPar.AddComment};
            end
            for Ic=1:1:length(InPar.AddComment),
 	            %Pos    = size(Header,1)-1;
                Header = cell_fitshead_addkey(Header,'COMMENT','',InPar.AddComment{Ic});
            end
            % history
            if (~iscell(InPar.AddHistory)),
	            InPar.AddHistory = {InPar.AddHistory};
            end
            for Ic=1:1:length(InPar.AddHistory),
 	            %Pos    = size(Header,1)-1;
                Header = cell_fitshead_addkey(Header,'HISTORY','',InPar.AddHistory{Ic});
            end
            % update Header
            Struct(Iim).(HeaderField) = Header;
	        fitswrite(Struct(Iim).(ImageField),...
                      sprintf('%s%s',OutDirPrefix,Output{Iim}),...
                      Header,...
                      InPar.DataType);
        end

     case 'mat'
         for Iim=1:1:Nim,
              eval(sprintf('save %s %s',...
			   sprintf('%s%s',OutDirPrefix,Output{Iim}),...
                           'Struct(Iim).(ImageField)'));
         end
     case 'smat'
	     for Iim=1:1:Nim,
    	      eval(sprintf('save %s %s',...
		 	               sprintf('%s%s',OutDirPrefix,Output{Iim}),...
                           'Struct(Iim)'));
         end
     case 'ssmat'
 	   eval(sprintf('save %s %s',...
			sprintf('%s%s',OutDirPrefix,Output{1}),...
                        'Struct'));
     case 'imwrite'
         % write image using imwrite.m
         for Iim=1:1:Nim,
   	      imwrite(Struct(Iim).(ImageField),...
	 	      sprintf('%s%s',OutDirPrefix,Output{Iim}),...
                      InPar.ImwriteOpt{:});
         end
     otherwise
         error('Unknown Format option');
end

% modify Output
Output = strcat(InPar.OutPrefix,Output);
Output = strcat(InPar.OutDir,Output);


