%
% Contents file for package: Optics
% Created: 29-Dec-2015
%---------
% diffraction_circular.m :  Calculate the theoretical diffraction pattern for a perfect circular aperture.
% fresnel_occultation_filt.m :  Calculates the diffraction pattern caused by a finite or point polychromatic source.
% fresnel_occultation_fs.m :  Calculate the diffraction pattern generated by a finite, non-point, monochromatic source.
% fresnel_occultation_ps.m :  Calculate the intensity pattern due to diffractive Fresnel occultation by a small circular object. Assuming a mono-chromatic observation and a point source.
% fresnelc.m :  Return the Fresnel cosine function f(T): cos(0.5*pi*T^2)
% fresnels.m :  Return the Fresnel sine function f(T): sin(0.5*pi*T^2)
% im_seeing_sample.m :  Given a 2D image (e.g., from a ray tracing simulation), convolve the image with the seeing disk, and resample the image (pixelize).
% noll_index.m :  Calculate the Zernike indices given the Noll index and visa versa.
% phase_complex.m :  Given an N-D array of complex numbers, return the phase of each complex number (i.e., atan2(imag(Matrix),real(Matrix))).
% shifted_fft2.m :  Given a matrix, return fftshift(fftshift(fft2(Matrix),1),2). This is the shifted fft of a matrix.
% telescope_support.m :  Construct an image of a telescope entrance pupil (support). For example, a clear circular pupil.
% wavefront2image.m :  Construct a wavefront from a matrix representation of the wavefront, and calculate the image plane of a point source with a given support (obstraction). 
% zer_cj_variance.m :  Return the expectency of standard deviation of the atmospheric Zernike c_j coefficients.
% zernike_xy.m :  A driver function for the external zerfun.m function. Given a list of zernike indices and a grid in the X-Y plan calculate a cube of the zernike functions. The first and second dimensions of the cube corresponds to the X and Y axes, while the third dimension to the zernike index.
% zerwavefront2image.m :  Construct a wavefront using Zernike polynomials, and calculate the image plane of a point source with a given support (obstraction). This function sum all the zernike function in the pupil plane and generate the corresponding image plane.
% zerwavefront2image_indiv.m :  Construct a wavefront using Zernike polynomials, and calculate the image plane of a point source with a given support (obstraction). However, unlike wavefront.m this function works on individual Zernike polynomials and return a cube in which each the the third dimension corresponds to the image plane of an individual Zernike function.
