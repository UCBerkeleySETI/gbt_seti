function [X,Y]=sky2xy_tan(FileName,Long,Lat,HDUnum)
%--------------------------------------------------------------------------
% sky2xy_tan function                                             ImAstrom
% Description: Given a FITS image, SIM or a structure containing the FITS
%              WCS keyword (returned by fits_get_wcs.m), where the
%              WCS is represented using the tangential 
%              projection, convert longitude and latitude position
%              to X and Y in the image.
% Input  : - A string containing a FITS image name, SIM, or a structure
%            containing the FITS WCS keyword, returned by fits_get_wcs.m,
%            or a SIM structure or class.
%          - Vector of Longitudes (e.g., RA)
%            [radian, sexagesimal string or vector] see convertdms.m
%          - Vector of Latitudes (e.g., Dec)
%            [radian, sexagesimal string or vector] see convertdms.m
%          - HDU number in FITS image from which to read the header.
%            Default is 1.
% Output : - Column vector of X [pixel].
%          - Column vector of Y [pixel].
% Tested : Matlab R2011b
%     By : Eran O. Ofek                    Nov 2012
%    URL : http://weizmann.ac.il/home/eofek/matlab/
% Example: [X,Y]=sky2xy_tan('File.fits',1,1);
%          % or:
%          WCS = fits_get_wcs('File.fits');
%          [X,Y]=sky2xy_tan(WCS,1,1);
%          % or:
%          Sim = images2sim('File.fits');
%          [X,Y]=sky2xy_tan(Sim,1,1);
% Reliable: 2
%--------------------------------------------------------------------------

RAD = 180./pi;

if (nargin==3),
    HDUnum = 1;
end

Long = convertdms(Long,'gH','r');
Lat  = convertdms(Lat,'gD','r');

% deal with types of input
if (isstruct(FileName)),
    if (isfield(FileName,'CTYPE1')),
        % assume input is a WCS structure (generated by fits_get_wcs.m)
        WCS = FileName;
        CallGetWCS = false;
    else
        CallGetWCS = true;
    end
else
    CallGetWCS = true;
end

if (CallGetWCS),
    WCS = fits_get_wcs(FileName,'HDUnum',HDUnum);
end


% transformation
if (~strcmp(WCS.CUNIT1,WCS.CUNIT2)),
   error('CUNIT1 must be identical to CUNIT2');
end

switch lower(WCS.CUNIT1)
    case {'deg','degree'}
       Factor = RAD;
    otherwise
       error('Unknown CUNIT option');
end

if (size(Long,1)==1),
   Long = Long.';
end                                                                            
if (size(Lat,1)==1),
   Lat = Lat.';
end


[DX,DY]=pr_gnomonic(Long,Lat,1,[WCS.CRVAL1, WCS.CRVAL2]./Factor);
XY     = bsxfun(@plus,(WCS.CD^-1)*[DX.';DY.'].*Factor,[WCS.CRPIX1; WCS.CRPIX2]);
X      = XY(1,:).';
Y      = XY(2,:).';
